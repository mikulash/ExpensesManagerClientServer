/**
 * ExpensesManager API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AggregatedTotalDto from './AggregatedTotalDto';

/**
 * The UserStatisticsDto model module.
 * @module model/UserStatisticsDto
 * @version v1
 */
class UserStatisticsDto {
    /**
     * Constructs a new <code>UserStatisticsDto</code>.
     * @alias module:model/UserStatisticsDto
     */
    constructor() {

        UserStatisticsDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) {
    }

    /**
     * Constructs a <code>UserStatisticsDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserStatisticsDto} obj Optional instance to populate.
     * @return {module:model/UserStatisticsDto} The populated <code>UserStatisticsDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserStatisticsDto();

            if (data.hasOwnProperty('totalIncome')) {
                obj['totalIncome'] = ApiClient.convertToType(data['totalIncome'], 'Number');
            }
            if (data.hasOwnProperty('totalExpense')) {
                obj['totalExpense'] = ApiClient.convertToType(data['totalExpense'], 'Number');
            }
            if (data.hasOwnProperty('balance')) {
                obj['balance'] = ApiClient.convertToType(data['balance'], 'Number');
            }
            if (data.hasOwnProperty('incomePerMonth')) {
                obj['incomePerMonth'] = ApiClient.convertToType(data['incomePerMonth'], [AggregatedTotalDto]);
            }
            if (data.hasOwnProperty('expensePerMonth')) {
                obj['expensePerMonth'] = ApiClient.convertToType(data['expensePerMonth'], [AggregatedTotalDto]);
            }
            if (data.hasOwnProperty('balancePerMonth')) {
                obj['balancePerMonth'] = ApiClient.convertToType(data['balancePerMonth'], [AggregatedTotalDto]);
            }
            if (data.hasOwnProperty('incomePerCategory')) {
                obj['incomePerCategory'] = ApiClient.convertToType(data['incomePerCategory'], [AggregatedTotalDto]);
            }
            if (data.hasOwnProperty('expensePerCategory')) {
                obj['expensePerCategory'] = ApiClient.convertToType(data['expensePerCategory'], [AggregatedTotalDto]);
            }
            if (data.hasOwnProperty('balancePerCategory')) {
                obj['balancePerCategory'] = ApiClient.convertToType(data['balancePerCategory'], [AggregatedTotalDto]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserStatisticsDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserStatisticsDto</code>.
     */
    static validateJSON(data) {
        if (data['incomePerMonth']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['incomePerMonth'])) {
                throw new Error("Expected the field `incomePerMonth` to be an array in the JSON data but got " + data['incomePerMonth']);
            }
            // validate the optional field `incomePerMonth` (array)
            for (const item of data['incomePerMonth']) {
                AggregatedTotalDto.validateJSON(item);
            }
        }
        if (data['expensePerMonth']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['expensePerMonth'])) {
                throw new Error("Expected the field `expensePerMonth` to be an array in the JSON data but got " + data['expensePerMonth']);
            }
            // validate the optional field `expensePerMonth` (array)
            for (const item of data['expensePerMonth']) {
                AggregatedTotalDto.validateJSON(item);
            }
        }
        if (data['balancePerMonth']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['balancePerMonth'])) {
                throw new Error("Expected the field `balancePerMonth` to be an array in the JSON data but got " + data['balancePerMonth']);
            }
            // validate the optional field `balancePerMonth` (array)
            for (const item of data['balancePerMonth']) {
                AggregatedTotalDto.validateJSON(item);
            }
        }
        if (data['incomePerCategory']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['incomePerCategory'])) {
                throw new Error("Expected the field `incomePerCategory` to be an array in the JSON data but got " + data['incomePerCategory']);
            }
            // validate the optional field `incomePerCategory` (array)
            for (const item of data['incomePerCategory']) {
                AggregatedTotalDto.validateJSON(item);
            }
        }
        if (data['expensePerCategory']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['expensePerCategory'])) {
                throw new Error("Expected the field `expensePerCategory` to be an array in the JSON data but got " + data['expensePerCategory']);
            }
            // validate the optional field `expensePerCategory` (array)
            for (const item of data['expensePerCategory']) {
                AggregatedTotalDto.validateJSON(item);
            }
        }
        if (data['balancePerCategory']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['balancePerCategory'])) {
                throw new Error("Expected the field `balancePerCategory` to be an array in the JSON data but got " + data['balancePerCategory']);
            }
            // validate the optional field `balancePerCategory` (array)
            for (const item of data['balancePerCategory']) {
                AggregatedTotalDto.validateJSON(item);
            }
        }

        return true;
    }


}


/**
 * @member {Number} totalIncome
 */
UserStatisticsDto.prototype['totalIncome'] = undefined;

/**
 * @member {Number} totalExpense
 */
UserStatisticsDto.prototype['totalExpense'] = undefined;

/**
 * @member {Number} balance
 */
UserStatisticsDto.prototype['balance'] = undefined;

/**
 * @member {Array.<module:model/AggregatedTotalDto>} incomePerMonth
 */
UserStatisticsDto.prototype['incomePerMonth'] = undefined;

/**
 * @member {Array.<module:model/AggregatedTotalDto>} expensePerMonth
 */
UserStatisticsDto.prototype['expensePerMonth'] = undefined;

/**
 * @member {Array.<module:model/AggregatedTotalDto>} balancePerMonth
 */
UserStatisticsDto.prototype['balancePerMonth'] = undefined;

/**
 * @member {Array.<module:model/AggregatedTotalDto>} incomePerCategory
 */
UserStatisticsDto.prototype['incomePerCategory'] = undefined;

/**
 * @member {Array.<module:model/AggregatedTotalDto>} expensePerCategory
 */
UserStatisticsDto.prototype['expensePerCategory'] = undefined;

/**
 * @member {Array.<module:model/AggregatedTotalDto>} balancePerCategory
 */
UserStatisticsDto.prototype['balancePerCategory'] = undefined;


export default UserStatisticsDto;

